diff --git a/.gitignore b/.gitignore
index 85221c7..f9f1fd1 100644
--- a/.gitignore
+++ b/.gitignore
@@ -42,5 +42,6 @@ src.sln
 Debug/
 Release/
 
+*.sw*
 
 cmake_install.cmake
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 512a5bb..d68e943 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -56,22 +56,35 @@ FIND_PACKAGE( Tesseract REQUIRED )
 
 include_directories(${Tesseract_INCLUDE_DIRS})
 
-# Discover OpenCV directory automatically
-find_path(OpenCV_DIR
-  NAMES OpenCVConfig.cmake
-  HINTS ${CMAKE_SOURCE_DIR}/../libraries/opencv/
-)
-# Opencv Package
-FIND_PACKAGE( OpenCV REQUIRED )
-IF (${OpenCV_VERSION} VERSION_LESS 2.4.7)
-	MESSAGE(FATAL_ERROR "OpenCV version is not compatible : ${OpenCV_VERSION}")
+IF(OpenCV_IOS_FRAMEWORK_PATH)
+  MESSAGE(INFO "Using OpenCV iOS framework: ${OpenCV_IOS_FRAMEWORK_PATH}")
+
+  # OpenCV's released framework has this disabled, 
+  # so we must too.
+  # http://stackoverflow.com/a/32710441/868173
+  SET(CMAKE_XCODE_ATTRIBUTE_ENABLE_BITCODE NO)
+
+  SET(OpenCV_INCLUDE_DIRS ${OpenCV_IOS_FRAMEWORK_PATH}/HeadersForAlpr)
+  SET(OpenCV_LIBS ${OpenCV_IOS_FRAMEWORK_PATH})
+  SET(OpenCV_DIR ${OpenCV_IOS_FRAMEWORK_PATH}/Resources)
+  SET(OpenCV_CONFIG_PATH ${OpenCV_IOS_FRAMEWORK_PATH}/Resources)
+ELSE()
+  # Discover OpenCV directory automatically
+  find_path(OpenCV_DIR
+    NAMES OpenCVConfig.cmake
+    HINTS ${CMAKE_SOURCE_DIR}/../libraries/opencv/
+    )
+  # Opencv Package
+  FIND_PACKAGE( OpenCV REQUIRED )
+  IF (${OpenCV_VERSION} VERSION_LESS 2.4.7)
+    MESSAGE(FATAL_ERROR "OpenCV version is not compatible : ${OpenCV_VERSION}")
+  ENDIF()
 ENDIF()
 
 include_directories(${OpenCV_INCLUDE_DIRS})
 
 add_definitions( -DOPENCV_MAJOR_VERSION=${OpenCV_VERSION_MAJOR})
 
-
 include_directories(./openalpr )
 
 IF (WIN32)
@@ -93,7 +106,10 @@ ENDIF()
 
 
 set(CMAKE_CSS_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Wall ")
-ADD_EXECUTABLE( alpr  main.cpp )
+
+if (NOT IOS)
+  ADD_EXECUTABLE( alpr  main.cpp )
+ENDIF()
 
 if (WIN32) 
    SET(OPENALPR_LIB openalpr-static)
@@ -101,15 +117,17 @@ ELSE()
    SET(OPENALPR_LIB openalpr)
 ENDIF()
 
-TARGET_LINK_LIBRARIES(alpr
-	${OPENALPR_LIB}
-	statedetection
-	support
+if (NOT IOS)
+  TARGET_LINK_LIBRARIES(alpr
+    ${OPENALPR_LIB}
+    statedetection
+    support
     video
-	${OpenCV_LIBS}
-	${Tesseract_LIBRARIES}
+    ${OpenCV_LIBS}
+    ${Tesseract_LIBRARIES}
     ${Extra_LIBS}
   )
+ENDIF()
 
 # Compile the alprd library on Unix-based OS
 IF (WITH_DAEMON)
@@ -148,8 +166,10 @@ if (WITH_BINDING_PYTHON)
 add_subdirectory(bindings/python)
 ENDIF()
 
-install (TARGETS    alpr DESTINATION   ${CMAKE_INSTALL_PREFIX}/bin)
-install (FILES      ${CMAKE_SOURCE_DIR}/../doc/man/alpr.1 DESTINATION       ${CMAKE_INSTALL_PREFIX}/share/man/man1 COMPONENT doc)
+if (NOT IOS)
+  install (TARGETS    alpr DESTINATION   ${CMAKE_INSTALL_PREFIX}/bin)
+  install (FILES      ${CMAKE_SOURCE_DIR}/../doc/man/alpr.1 DESTINATION       ${CMAKE_INSTALL_PREFIX}/share/man/man1 COMPONENT doc)
+ENDIF(NOT IOS)
 install (DIRECTORY  ${CMAKE_SOURCE_DIR}/../runtime_data DESTINATION         ${CMAKE_INSTALL_PREFIX}/share/openalpr)
 
 # set runtime_data to reflect the current CMAKE_INSTALL_PREFIX
diff --git a/src/statedetection/CMakeLists.txt b/src/statedetection/CMakeLists.txt
index a7a3cdb..515798c 100644
--- a/src/statedetection/CMakeLists.txt
+++ b/src/statedetection/CMakeLists.txt
@@ -8,7 +8,7 @@ set(statedetector_source_files
   state_detector_impl.cpp
 )
 
-if (WIN32) 
+if (WIN32 OR IOS) 
 	add_library(statedetection 		STATIC ${statedetector_source_files} )
 ELSE()
 	add_library(statedetection 		SHARED ${statedetector_source_files} )
