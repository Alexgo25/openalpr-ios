diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 2315658..bd44c96 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -52,26 +52,62 @@ IF (WIN32 AND WITH_DAEMON)
   SET(WITH_DAEMON OFF)
 ENDIF()
 
-FIND_PACKAGE( Tesseract REQUIRED )
+IF (OPENALPR_DEP_COCOA_PODS_PATH) 
+  SET(Tesseract_INCLUDE_DIRS "${OPENALPR_DEP_COCOA_PODS_PATH}/TesseractOCRiOS/TesseractOCR/include")
+  SET(Tesseract_LIBRARIES "${OPENALPR_DEP_COCOA_PODS_PATH}/TesseractOCRiOS/TesseractOCR/lib/liblept.a;${OPENALPR_DEP_COCOA_PODS_PATH}/TesseractOCRiOS/TesseractOCR/lib/libtesseract_all.a")
+ELSE()
+  FIND_PACKAGE(Tesseract REQUIRED)
+ENDIF()
 
 include_directories(${Tesseract_INCLUDE_DIRS})
 
-# Discover OpenCV directory automatically
-find_path(OpenCV_DIR
-  NAMES OpenCVConfig.cmake
-  HINTS ${CMAKE_SOURCE_DIR}/../libraries/opencv/
-)
-# Opencv Package
-FIND_PACKAGE( OpenCV REQUIRED )
-IF (${OpenCV_VERSION} VERSION_LESS 2.4.7)
-	MESSAGE(FATAL_ERROR "OpenCV version is not compatible : ${OpenCV_VERSION}")
+IF (OPENALPR_DEP_COCOA_PODS_PATH) 
+
+  SET(OpenCV_POD_Dir "${OPENALPR_DEP_COCOA_PODS_PATH}/OpenCV/opencv2.framework")
+  MESSAGE(INFO "OpenCV CocoaPods dir: ${OpenCV_POD_Dir}")
+
+  SET(OpenCV_POD_Include_Dir "${OpenCV_POD_Dir}/openalpr_include")
+  SET(OpenCV_INCLUDE_DIRS ${OpenCV_POD_Include_Dir})
+
+  SET(OpenCV_LIBS "${OPENALPR_DEP_COCOA_PODS_PATH}/OpenCV/opencv2.framework/opencv2")
+
+  SET(OpenCV_CONFIG_PATH "${OpenCV_POD_Dir}/Resources")
+ELSEIF(OpenCV_IOS_FRAMEWORK_PATH)
+  MESSAGE(INFO "Using OpenCV iOS framework: ${OpenCV_IOS_FRAMEWORK_PATH}")
+
+  # TODO: move to IOS specific block instead of opencv specific
+  # http://stackoverflow.com/questions/822404/how-to-set-up-cmake-to-build-an-app-for-the-iphone 
+  # "so that the product type generated would be com.apple.product-type.application instead of com.apple.product-type.tool"
+  set(CMAKE_MACOSX_BUNDLE YES)
+
+  # http://stackoverflow.com/a/32710441/868173
+  SET(CMAKE_XCODE_ATTRIBUTE_ENABLE_BITCODE NO)
+
+  #SET(CMAKE_EXE_LINKER_FLAGS "-ObjC -framework CoreGraphics -framework QuartzCore -framework AssetsLibrary -framework CoreVideo -framework AVFoundation -framework CoreMedia -framework Foundation -framework UIKit -framework ImageIO -lopenalpr-static -lstatedetection -lvideo")
+  SET(CMAKE_EXE_LINKER_FLAGS "-ObjC -framework CoreGraphics -framework QuartzCore -framework AssetsLibrary -framework CoreVideo -framework AVFoundation -framework CoreMedia -framework Foundation -framework UIKit -framework ImageIO -lopenalpr -lstatedetection -lvideo")
+  #SET(CMAKE_EXE_LINKER_FLAGS " -ObjC ")
+
+  SET(OpenCV_INCLUDE_DIRS ${OpenCV_IOS_FRAMEWORK_PATH}/Headers)
+  SET(OpenCV_LIBS ${OpenCV_IOS_FRAMEWORK_PATH})
+  SET(OpenCV_DIR ${OpenCV_IOS_FRAMEWORK_PATH}/Resources)
+  SET(OpenCV_CONFIG_PATH ${OpenCV_IOS_FRAMEWORK_PATH}/Resources)
+ELSE()
+  # Discover OpenCV directory automatically
+  find_path(OpenCV_DIR
+    NAMES OpenCVConfig.cmake
+    HINTS ${CMAKE_SOURCE_DIR}/../libraries/opencv/
+    )
+  # Opencv Package
+  FIND_PACKAGE( OpenCV REQUIRED )
+  IF (${OpenCV_VERSION} VERSION_LESS 2.4.7)
+    MESSAGE(FATAL_ERROR "OpenCV version is not compatible : ${OpenCV_VERSION}")
+  ENDIF()
 ENDIF()
 
 include_directories(${OpenCV_INCLUDE_DIRS})
 
 add_definitions( -DOPENCV_MAJOR_VERSION=${OpenCV_VERSION_MAJOR})
 
-
 include_directories(./openalpr )
 
 IF (WIN32)
@@ -195,3 +231,11 @@ CONFIGURE_FILE(
   @ONLY)
 
 ADD_CUSTOM_TARGET(uninstall COMMAND ${CMAKE_COMMAND} -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake")
+
+IF (OPENALPR_DEP_COCOA_PODS_PATH)
+  # Need to pass these to the custom target as ENV variables, as 
+  # normal variables are not available to that target.
+  #SET(ENV{OPENCV_POD_DIR} ${OpenCV_POD_Dir})
+  #SET(ENV{OPENCV_POD_INCLUDE_DIR} ${OpenCV_POD_Include_Dir})
+  ADD_CUSTOM_TARGET(cocoapod_setup COMMAND OPENCV_POD_DIR=${OpenCV_POD_Dir} OPENCV_POD_INCLUDE_DIR=${OpenCV_POD_Include_Dir} ${CMAKE_COMMAND} -P "${CMAKE_MODULE_PATH}/InstallCocoaPods.cmake")
+ENDIF()

